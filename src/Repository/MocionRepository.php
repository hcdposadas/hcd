<?php

namespace App\Repository;

use App\Entity\Mocion;
use Exception;

/**
 * MocionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MocionRepository extends \Doctrine\ORM\EntityRepository
{
    public function siguienteNumero()
    {
        try {
            $sesion = $this->createQueryBuilder('m')
                ->join('m.sesion', 's')
                ->where('s.activo = true')
                ->setMaxResults(1)
                ->orderBy('s.id', 'DESC')
                ->getQuery()
                ->getSingleResult()
                ->getSesion();
        } catch (Exception $e) {
            return 1;
        }

        $query = $this->createQueryBuilder('m')
            ->join('m.sesion', 's')
            ->where('m.activo  = true')
            ->andWhere('s.id = :sesion')
            ->orderBy('m.numero', 'DESC')
            ->setParameter('sesion', $sesion->getId())
            ->setMaxResults(1)
            ->getQuery();

        $result = $query->getResult();
        if (!count($result)) {
            return 1;
        }

        return $result[0]->getNumero() + 1;
    }


    /**
     * @return Mocion|null
     */
    public function getEnVotacion()
    {
        $result = $this->createQueryBuilder('m')
            ->join('m.estado', 'e')
            ->where('m.activo = true')
            ->andWhere('e.slug = :slug')
            ->setParameter('slug', Mocion::ESTADO_EN_VOTACION)
            ->getQuery()
            ->getResult();

        if (count($result)) {
            return $result[0];
        }

        return null;
    }

    /**
     * @return null
     */
    public function getAllEnVotacion()
    {
//		TODO este metodo se creo para para no tocar el metodo getEnVotacion, ver despues si arreglamos el anterior o se deja asi
        $result = $this->createQueryBuilder('m')
            ->join('m.estado', 'e')
            ->where('m.activo = true')
            ->andWhere('e.slug = :slug')
            ->setParameter('slug', Mocion::ESTADO_EN_VOTACION)
            ->getQuery()
            ->getResult();

        return $result;
    }


    public function findByUltimaSesion($sesion)
    {
        $qb = $this->createQueryBuilder('m');

        $qb->where('m.sesion = :sesion')
            ->setParameter('sesion', $sesion)
            ->orderBy('m.id', 'DESC');


        return $qb->getQuery()
            ->getResult();
    }
}
